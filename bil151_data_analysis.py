# -*- coding: utf-8 -*-
"""bil151_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EM6uHeVHVvMK7hxNezLMkcjWvMfpitkk

# Data Analysis for Biology Lab (BIL 151)
### Using Python to automate Mann-Whitney U Ranked Test and data visualization
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries we need

import matplotlib
# %matplotlib inline

import pandas as pd

import matplotlib.pyplot as plt
from google.colab import files

uploaded = files.upload() # upload your data as a .csv file named bil151data.csv here

import io
data = pd.read_csv(io.BytesIO(uploaded['bil151data.csv'])) # Make sure the filename you uploaded is bil151data.csv!
data # prints the data

"""### Basic Statistics"""

data.describe()

"""## Converting Data to Python Data Structures and Sorting"""

# Convert from data frame to list (treatment)
T = pd.DataFrame(data, columns=['T'])
T_list = T.values.tolist()
T_list.sort()
T_list

# convert list to dictionary so that we can have key value pairs
def list2dict(columnName, list):
  dict = {columnName+str(i): list[i][0] for i in range(0, len(list))}
  return dict

print(list2dict("T", T_list))

C = pd.DataFrame(data, columns=['C'])
C_list = C.values.tolist()
C_list.sort()
C_list

print(list2dict("C", C_list))

T_dict = list2dict("T", T_list)
C_dict = list2dict("C", C_list)
dict = {}
dict.update(T_dict)
dict.update(C_dict)

def sortDict(dict):
  tuple = sorted(dict.items(),  key=lambda x: x[1])
  return tuple

def sortedDict(dict):
  sorted = []
  for elem in sortDict(dict):
    res = (elem[0], elem[1])
    sorted.append(res)
  return sorted 

print(sortedDict(dict))

s = sortedDict(dict)
s

"""## Mann-Whitney U Ranking:   
### Algorithm
```
for i in (0, len(dict)):   
  if key == "C":   
    for j in range(i+1, len(dict)):    
      if key == "T":    
        count+=1
        j+=1
  elif key == "T":  
    # ditto 
  i+=1
  return count_i
```

### Mann-Whitney U Ranking Code  
Every Control gets one point for each Treatment below it  
Every Treatment gets one point for each Control below it
"""

def rank(dict): 
  s = sortedDict(dict)
  for i in range(0, len(dict)): # iterate through the entire list
    count_i = 0
    if s[i][0][0] == "C": # if it's Control
      for j in range(i+1,len(dict)): # iterate through remaining items in the list
        if s[j][0][0] == "T": # if the next one is Treatment, increment count
          count_i += 1
          j += 1  
    elif s[i][0][0] == "T": # ditto
      for k in range(i+1,len(dict)):
        if s[k][0][0] == "C":
          count_i += 1
          k += 1

    print(s[i], count_i)
    i+=1

# O(n^2) run time 
    
rank(dict)

"""Add up points for each group.  
U Statistic is the smaller sum of C or T group.   
In this case, it is C = 4+4+4+3+2=17. (< critical value of 23)  
Reject null hypothesis!

# Data Visualization   
## Box Plot
"""

df1 = pd.DataFrame(data, columns=['T',	'C']) # You can create a dataframe by specifying the columns you want 
df1.boxplot()

"""## Bar Plot"""

df1 = df1.mean()
df1.plot.bar()